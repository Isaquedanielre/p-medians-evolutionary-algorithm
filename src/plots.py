# -*- coding: utf-8 -*-
from matplotlib import pyplot as plt, rcParams, rc
from datetime import datetime as dt
from cPickle import load

rc('font', **{'family': 'serif', 'serif': ['Times'], 'size': 18})
rcParams['text.usetex'] = True
rcParams['text.latex.unicode'] = True
colors = ['b', 'r', 'g', 'k', 'm', 'c', 'y']
symbols = ['-', '--', '-.']
nc = len(colors)
ns = len(symbols)


def simple_plot(data, xlabel, ylabel):
    x = range(len(data))
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.set_xlim(x[0] - 1, x[-1] + 1)
    ax.plot(x, data)
    ax.autoscale_view()
    ax.grid(True)
    plt.savefig('test' + str(dt.now()) + '.png')


def multi_plot(data_list, xlabel, ylabel, file_name=None, best=None):
    count = 0
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    longest_nums_list = []
    legend_elements = []
    legend_descriptions = []
    for data, legend in data_list:
        x_nums = range(len(data))
        if len(x_nums) > len(longest_nums_list):
            longest_nums_list = x_nums
        l, = ax.plot(x_nums, data, colors[count % nc] + symbols[count % ns],
                     linewidth=2)
        count += 1
        if legend is not None:
            legend_elements.append(l)
            legend_descriptions.append(legend)
    if best is not None:
        best_l = [best] * len(longest_nums_list)
        l, = ax.plot(longest_nums_list, best_l,
                     colors[count % nc] + symbols[count % ns], linewidth=2)
        count += 1
        legend_elements.append(l)
        legend_descriptions.append(u'Ótimo')
    # ax.set_xlim(longest_nums_list[0] - 1, longest_nums_list[-1] + 1)
    ax.autoscale_view()
    ax.grid(True)
    fig.legend(legend_elements, legend_descriptions, 'upper center', ncol=2)
    if file_name:
        plt.savefig('plots/' + file_name + '.pdf')
    else:
        plt.savefig('plots/test' + str(dt.now()) + '.pdf', bbox_inches='tight')


def plot_rep_ind_mean_fit():
    '''horrible piece of code, made in a hurry
    '''
    rep_ind = [0, 17, 28, 28, 27, 33, 29, 32, 21, 33, 36, 42, 52, 43, 46, 49, 40, 59, 51, 57, 49, 63, 67, 56, 59, 68, 64, 64, 62, 81, 78, 77, 88, 90, 82, 89, 99, 105, 91, 85, 80, 85, 84, 79, 89, 93, 112, 103, 105, 95, 101, 101, 109, 107, 111, 106, 120, 119, 117, 111, 120, 116, 113, 107, 97, 102, 105, 99, 113, 113, 112, 109, 107, 109, 110, 106, 115, 113, 113, 106, 116, 116, 114, 108, 109, 115, 103, 108, 106, 106, 105, 104, 109, 113, 111, 111, 111, 119, 112, 132, 115, 115, 115, 105, 96, 102, 105, 102, 104, 94, 96, 101, 84, 81, 103, 100, 100, 84, 90, 108, 114, 106, 111, 102, 110, 109, 109, 114, 113, 105, 104, 112, 110, 106, 113, 121, 117, 105, 108, 111, 114, 114, 107, 101, 102, 109, 114, 126, 118, 115, 121, 113, 126, 125, 121, 109, 109, 116, 119, 122, 117, 112, 102, 114, 124, 119, 121, 115, 119, 111, 114, 118, 113, 117, 119, 119, 120, 110, 113, 111, 111, 116, 109, 95, 95, 105, 119, 119, 122, 119, 120, 121, 125, 118, 119, 124, 120, 126, 119, 124, 115, 126, 126, 119, 123, 122, 127, 132, 131, 122, 118, 117, 114, 116, 114, 116, 120, 123, 130, 121, 120, 119, 110, 113, 112, 99, 114, 114, 108, 109, 106, 120, 120, 126, 138, 135, 124, 124, 134, 135, 139, 136, 133, 135, 125, 112, 107, 115, 120, 107, 105]
    mean_fit = [42730.94600656267, 40653.89275079902, 40304.76155664758, 39083.850642587604, 37874.080026027026, 37108.81569376768, 36113.93647495567, 36661.453864123505, 36633.61768652612, 35143.27567247064, 34513.407561213855, 34018.147800613435, 33333.95425705927, 33836.60292369364, 31184.212454868077, 30483.88120062804, 31626.92658916352, 32020.770329039122, 31863.796028481054, 31510.05539950307, 30885.024733988048, 30180.77798753077, 28347.212748010537, 28666.579766182767, 28301.803292637807, 28279.970048804455, 27346.397967445875, 27512.629035469294, 26146.459606008735, 25044.16051006256, 25323.0281753613, 25443.40473586693, 25029.03757315931, 24441.975089929067, 24801.349466418385, 25308.389314860004, 25102.8392246702, 25712.430476152207, 25605.35989563984, 24984.81226736799, 24624.433739987355, 25262.12143355325, 26049.58525083004, 25725.732865208516, 25913.94432879905, 25103.836446136673, 24794.392397322394, 24623.74000408819, 24147.439950507567, 24150.346755828195, 23880.415493590608, 23602.39020358007, 24524.022999571673, 24527.338620272236, 24085.04215126079, 24366.152896965865, 23911.50004257008, 24048.173949204232, 23228.058951997613, 23558.168779838386, 23722.285022009586, 24463.169851015973, 24514.60589768769, 24075.210854947247, 25129.88428339134, 25857.29428862842, 25805.581493343256, 25685.70303161083, 25342.498382540696, 24741.330473409394, 26142.428096872245, 25796.014176215438, 25304.90997073804, 25425.906874058946, 26531.983205623274, 26926.500098457047, 25875.651294461408, 25435.492903997278, 25891.987336994564, 25128.67601613828, 24805.778388711155, 24308.520385878553, 24343.17774547517, 24231.43881532091, 25177.28584558725, 24620.846059356416, 23953.555838456574, 24031.757834960306, 24301.67069527826, 24643.70617904711, 24171.621890067694, 24670.762246039147, 23975.998707435163, 23642.63823841509, 24920.46162829858, 25468.98631297675, 25033.661516387387, 24828.382162914684, 25540.39321065731, 24608.01419665046, 24664.243440270668, 25122.916995770796, 25075.535415292452, 25914.43269334817, 26565.675641024645, 26248.874809144796, 26096.81150996045, 27219.075429479442, 27900.106906602465, 28505.30107106468, 28607.048666244755, 28124.990895396477, 28210.390848227173, 27014.057950243987, 26039.81953171202, 26576.62024359782, 26920.744143975528, 27062.423699391777, 26145.065493605736, 26000.770794103675, 24917.079091603733, 25035.253090438888, 24670.021663307678, 24769.813783184014, 24067.241329088236, 24656.11117738676, 23589.12448719942, 23104.034025501514, 23877.05671996873, 25049.050165826273, 24749.673097652878, 25030.02096059225, 24382.19621402789, 24886.111086538855, 24662.459427923663, 23643.613724587918, 23427.50457494749, 24579.077109041125, 23767.365408796573, 24126.787798181344, 24077.34027207149, 24744.348313948474, 24705.417726217802, 24541.176729531326, 24253.42779122158, 23754.42633481908, 23795.777628272845, 23777.945045377022, 22974.67767163626, 22801.11330384237, 22951.904112059005, 22719.84653686089, 21891.30155732704, 21887.44644548126, 22362.269172843473, 22922.387539315787, 22406.552669594774, 22574.43534224628, 23061.96352793869, 22834.85358803556, 22843.680747048165, 23572.88913029396, 23994.98977570171, 24533.570487306464, 23940.71244392163, 24529.89939452001, 24100.213801474787, 24286.42385266118, 25467.097788197865, 24546.185451983547, 24627.83502896714, 24643.547646648844, 24940.43461828296, 26218.994764160812, 26199.698245935713, 25551.72300324878, 25606.711649663186, 26487.278395718346, 25325.317311828974, 26851.366123464995, 27004.856103903818, 25681.868597638128, 26387.568298380724, 25930.097870321883, 25874.653922130397, 25573.331159144822, 24554.684919629613, 24480.008388574257, 23306.806299836007, 22860.986408768178, 22144.845236878264, 22113.855757945305, 22160.729550386473, 22608.424483188515, 22862.41439598305, 22568.568794368384, 22554.246728634924, 22689.95667730527, 22869.257437380827, 22769.027407356552, 22216.03489699813, 21996.145814613836, 22247.399395529934, 22238.612313659898, 22790.303160245145, 22647.33234323954, 22038.869954322126, 21589.093751780816, 21391.47833760743, 21886.767708824897, 21996.84803857059, 21547.640470781385, 21963.059883713624, 22199.05168326916, 21926.130231262217, 22376.59689747063, 22344.30829956584, 22968.667211926906, 22320.533960995614, 22840.399402751675, 23392.814927937758, 22956.61378791384, 23325.985865360373, 23423.247958765376, 23425.819716107533, 23843.321049852148, 23326.037883054945, 23715.36535389404, 23686.507062121225, 23695.392727730647, 24221.89196109995, 22951.387378723077, 21981.335508387587, 21981.34845833196, 22104.24226604976, 21565.22278887136, 21716.240317435335, 22283.888598238165, 22611.594719642435, 22305.135096911014, 21774.898374058528, 21865.20913935877, 22251.472463848928, 22373.65364707172, 22590.9988994422, 22785.54873228464, 23460.49296367054, 22935.42571456278, 23538.680126849635, 23469.1793960817, 24090.297305327254]
    mean_fit = [x / 1000 for x in mean_fit]
    fig = plt.figure()
    host = fig.add_subplot(111)
    par1 = host.twinx()
    p1, = host.plot(range(len(rep_ind)), rep_ind, 'b-', label=u'Indivíduos repetidos', linewidth=2)
    p2, = par1.plot(range(len(mean_fit)), mean_fit, 'r-', label=u'Fitness média', linewidth=2)
    host.set_xlabel(u'Gerações')
    host.set_ylabel(u'Indivíduos repetidos')
    par1.set_ylabel(u'Fitness Média (x1000)')
    host.autoscale_view()
    par1.autoscale_view()
    host.grid(True)
    box = host.get_position()
    host.set_position([box.x0, box.y0 + box.height * 0.2,
                     box.width, box.height * 0.8])
    box = par1.get_position()
    par1.set_position([box.x0, box.y0 + box.height * 0.2,
                     box.width, box.height * 0.8])
    lines = [p1, p2]
    fig.legend(lines, [l.get_label() for l in lines], loc='upper center', ncol=2, bbox_to_anchor=(0.5, 0.18))
    plt.savefig('plots/rep_ind_mean_fit.pdf')


def plot_population_impact(file_name):
    f1 = load(open('dumps/100-100-0.001-0.6-2-0.01', 'r'))
    f2 = load(open('dumps/500-100-0.001-0.6-2-0.01', 'r'))
    f3 = load(open('dumps/1000-100-0.001-0.6-2-0.01', 'r'))
    multi_plot([(f1, '100'), (f2, '500'), (f3, '1000')], u'Geração',
                u'Média da melhor fitness (x1000)', file_name, 17246.53 / 1000)


def plot_generation_impact(file_name):
    f1 = load(open('dumps/200-4950-0.001-0.6-2-0.01', 'r'))
    multi_plot([(f1, '4950'), ([], None), ([], None)], u'Geração',
                u'Média da melhor fitness (x1000)', file_name, 17246.53 / 1000)


def plot_coprob_impact(file_name):
    f1 = load(open('dumps/200-250-0.001-0.25-2-0.01', 'r'))
    f2 = load(open('dumps/200-250-0.001-0.5-2-0.01', 'r'))
    f3 = load(open('dumps/200-250-0.001-0.75-2-0.01', 'r'))
    multi_plot([(f1, '0.25'), (f2, '0.50'), (f3, '0.75')], u'Geração',
                u'Média da melhor fitness (x1000)', file_name, 17246.53 / 1000)


def plot_mutprob_impact(file_name):
    f1 = load(open('dumps/200-250-0.001-0.6-2-0.01', 'r'))
    f2 = load(open('dumps/200-250-0.01-0.6-2-0.01', 'r'))
    f3 = load(open('dumps/200-250-0.1-0.6-2-0.01', 'r'))
    multi_plot([(f1, '0.001'), (f2, '0.01'), (f3, '0.1')], u'Geração',
                u'Média da melhor fitness (x1000)', file_name, 17246.53 / 1000)


def plot_tsize_impact(file_name):
    f1 = load(open('dumps/200-250-0.1-0.6-2-0.01', 'r'))
    f2 = load(open('dumps/200-250-0.1-0.6-5-0.01', 'r'))
    f3 = load(open('dumps/200-250-0.1-0.6-15-0.01', 'r'))
    multi_plot([(f1, '2'), (f2, '5'), (f3, '15')], u'Geração',
                u'Média da melhor fitness (x1000)', file_name, 17246.53 / 1000)


def plot_elitism_impact(file_name):
    f1 = load(open('dumps/200-250-0.1-0.6-2-0.0', 'r'))
    f2 = load(open('dumps/200-250-0.1-0.6-2-0.01', 'r'))
    f3 = load(open('dumps/200-250-0.1-0.6-2-0.1', 'r'))
    multi_plot([(f1, '0.0'), (f2, '0.01'), (f3, '0.1')], u'Geração',
                u'Média da melhor fitness (x1000)', file_name, 17246.53 / 1000)

if __name__ == '__main__':
    plot_population_impact('popsize_impact')
    plot_generation_impact('gener_impact')
    plot_coprob_impact('coprob_impact')
    plot_mutprob_impact('mutprob_impact')
    plot_tsize_impact('tsize_impact')
    plot_elitism_impact('elitism_impact')
    plot_rep_ind_mean_fit()
